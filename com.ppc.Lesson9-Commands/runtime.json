{
  "version": {
    # The current version number of your bot, which must increment on each publication.
    "version": "1.0.0",

    # Description of what's new in this version.
    "whatsnew": {
        "en": "Creation"
    },

    # TRIGGER
    # Describe when this bot should trigger and execute. Add the trigger IDs together to combine triggers.
    # For example, to trigger off of both a Schedule (1) and a Device Measurement (8): 1 + 8 ==math==> "trigger": 9
    #
    # 1 = Schedule (based off a cron schedule inside this runtime.json file)
    # 2 = Switching modes (home / away / etc.)
    # 4 = Device alert
    # 8 = Device measurements or state change
    # 16 = Question answered by the user
    # 32 = New device file (like a video or picture)
    # 64 = Reserved for timers
    # 128 = Device configuration or metadata was updated
    # 256 = Data Stream Message received
    "trigger": 8,

    # DEVICE TYPES
    # For trigger types 4 (alerts), 8 (measurements), and 128 (configurations), we must specify which device types
    # we want to interact with and how. When bots are attached to users' accounts, they automatically connect with
    # every device in the user's account that match these criteria.
    #
    # Use this command in your terminal to discover device types:
    #   botengine --device_types
    #
    # Attributes:
    #   * "id" = device type ID to interact with
    #   * "minOccurrence" = (optional) the minimum number of occurrences of this device type required for this bot to perform
    #   * "trigger" = true to trigger off devices of this type
    #   * "read" = true to read measurements from devices of this type
    #   * "control" = true to send commands to devices of this type
    #   * "triggerParamName" = (optional) a single parameter name to listen to, which can help optimize execution performance
    #   * "triggerParamValues" = (optional) only trigger when the 'triggerParamName' is equal to this value
    #   * "reason" = Message to the end user about why they should let your bot access this device. You can specify multiple languages.
    "deviceTypes": [
      {
        # lightSwitch.py virtual device
        "id": 10072,
        "minOccurrence": 1,
        "trigger": true,
        "read": true,
        "control": false,
        "triggerParamName": "ppc.switchStatus",
        "triggerParamValues": "0,1",
        "reason": {
          "en": "Light switches will control our lights"
        }
      },
      {
        # lightBulb.py virtual device
        "id": 10071,
        "minOccurrence": 1,
        "trigger": false,
        "read": true,
        "control": true,
        "reason": {
          "en": "Add lights to control with your light switches."
        }
      }
    ]
  }
}
